#!/bin/bash

name=$(basename $0)
full_path=$(dirname $(readlink -f $0))
args=("$@")

secrets_arn="${SECRETS_ARN}"
secrets_prefix="${SECRETS_PREFIX}"
secrets_transform="${SECRETS_TRANSFORM}"

# Create a temp file to hold values to be exported
tmp_file="/tmp/${name}.XXXXXX"
last_cmd=$?
if [[ ${last_cmd} -ne 0 ]]; then
	echo "[Secret] Failed to create a temp file"
	exit 1
fi

# Get the secret value by calling the Rust executable
${full_path}/env-vars-from-secrets-manager --secrets "${secrets_arn}" --path "${tmp_file}" --prefix "${secrets_prefix}" --transform "${secrets_transform}"
last_cmd=$?

if [[ ${last_cmd} -ne 0 ]]; then
    echo "[Secret] Failed to setup environment for Secrets ${secrets}"
    exit 1
fi

. ${tmp_file}

# Determine if AWS_LAMBDA_EXEC_WRAPPER points to this layer
# This is necessary to prevent unnecessary re-execution of the script
# if no further layer is specified.
layer_name=$(basename ${AWS_LAMBDA_EXEC_WRAPPER})

# If the current layer is the last one in the chain, unset the wrapper
# to avoid redundant execution.
if [[ "${layer_name}" == "${name}" ]]; then
    echo "[Secret] No new layer was specified, unsetting AWS_LAMBDA_EXEC_WRAPPER"
    unset AWS_LAMBDA_EXEC_WRAPPER
else
    # Set args to include the new layer
    args=("${AWS_LAMBDA_EXEC_WRAPPER}" "${args[@]}")
fi

# Remove the temp file
rm ${tmp_file} > /dev/null 2>&1

# Execute the next step
exec ${args[@]}